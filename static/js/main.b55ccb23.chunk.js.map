{"version":3,"sources":["component/AccountBalance/AccountBalance.jsx","component/Coin/Coin.jsx","component/CoinList/CoinList.jsx","component/CoinExchangeHeader/logo.svg","component/CoinExchangeHeader/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["Section","styled","section","SecButton","button","AccountBalance","props","balanceText","showBalance","content","amount","Fragment","hidden","onClick","handleBalanceDisplay","CoinRow","td","Coin","name","ticker","price","balance","action","method","event","preventDefault","handleRefresh","tickerId","Table","table","CoinList","coinData","map","key","Image","img","AppHeader","header","Title","h1","Header","src","logo","alt","div","formatPrice","parseFloat","Number","toFixed","App","useState","coinExchangeHeader","setShowBalance","setCoinData","valueChangedTickerId","a","tickerUrl","axios","get","response","newCoinData","values","newValue","data","quotes","USD","newValues","componentDidMount","coinId","slice","coin","id","promises","Promise","all","coinPriceData","symbol","console","log","useEffect","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b55ccb23.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport 'styled-components'\nimport styled from 'styled-components';\n\nconst Section = styled.section `\n    font-size: 2rem;\n    text-align: left;\n    padding: 1.5rem 0 1.5rem 5rem;\n`;\nconst SecButton = styled.button `\n    padding: 1.5rem 0 1.5rem 5rem;\n    text-align: center;\n    min-width: 10vh;\n    min-height: 2.5vh\n`;\n\nexport default function AccountBalance(props) {\n    const balanceText = props.showBalance ? 'HideBalance' : 'ShowBalance';\n    let content = null;\n    if(props.showBalance) {\n        content = <>Balance ${props.amount}</>\n    }\n    return (\n        <React.Fragment>\n            <div>\n            <Section hidden={!props.showBalance}>\n                {content}    \n                        \n            </Section>\n            <SecButton onClick = {props.handleBalanceDisplay}>{balanceText}</SecButton> \n            \n            \n            </div>\n        </React.Fragment>\n    );\n}\n\nAccountBalance.propTypes = {\n    amount : PropTypes.number.isRequired,\n    showBalance : PropTypes.bool.isRequired\n}\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst CoinRow = styled.td `\n    border: 1px solid #cccccc;\n    width: 25vh;\n`;\n\nexport default function Coin(props) {\n    \n    const handleClick = (event) => {\n        event.preventDefault();\n        props.handleRefresh(props.tickerId);\n    }\n\n    return(\n        <tr>\n            <CoinRow>{props.name}</CoinRow>\n            <CoinRow>{props.ticker}</CoinRow>\n            <CoinRow>${props.price}</CoinRow>\n            <CoinRow hidden={!props.showBalance}>${props.balance}</CoinRow>\n            <CoinRow>\n                <form action = \"#\" method=\"POST\">\n                    <button onClick={handleClick}>Refresh</button>\n                </form>\n            </CoinRow>\n        </tr> \n    );\n}\n\nCoin.propTypes = {\n    name: PropTypes.string.isRequired,\n    ticker: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    balance: PropTypes.number.isRequired,\n    showBalance : PropTypes.bool.isRequired\n}\n","import React from 'react';\nimport Coin from '../Coin/Coin'\nimport 'styled-components'\nimport styled from 'styled-components';\n\nconst Table = styled.table`\n    margin: 50px auto 50px auto;\n    font-size: 1.4rem;\n    display: inline-block;\n`;\n\nexport default function CoinList(props) {\n    return (\n        <div>\n        <Table>\n            <thead>\n                <tr>\n                <th>Name</th>\n                <th>Ticker</th>\n                <th>Price</th>\n                <th hidden={!props.showBalance}>Balance</th>\n                <th>Action</th>\n                </tr>\n            </thead>\n            <tbody>\n                {props.coinData.map(({key, name, ticker, price, balance}) => \n                    <Coin \n                        key={key} \n                        handleRefresh={props.handleRefresh}\n                        name={name} \n                        ticker={ticker} \n                        price={price} \n                        balance={balance}\n                        showBalance={props.showBalance}\n                        tickerId = {key}\n                        />)\n                }\n            </tbody>\n        </Table>\n        </div>\n    );\n    }\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\nimport styled from 'styled-components';\nimport logo from './logo.svg';\n\nconst Image = styled.img`\n    height: 8vmin;\n    pointer-events: none;\n`;\n\nconst AppHeader = styled.header`\n    background-color: #282c34;\n    min-height: 20vh;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-start;\n    color: white;\n`;\n\nconst Title = styled.h1`\n    font-size: 2rem;\n`;\n  \nexport default function Header(props) {\n    return (\n        <AppHeader>\n            <Image src={logo} alt=\"ReactApp\"/>\n                <Title>\n                    {props.header}</Title>\n        </AppHeader>      \n    )\n}\n","\nimport AccountBalance from './component/AccountBalance/AccountBalance';\nimport CoinList from './component/CoinList/CoinList';\nimport Header from './component/CoinExchangeHeader/Header';\nimport 'styled-components'\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\n\n\n\nconst AppHeader = styled.div`\n  text-align: center;\n  background-color: rgb(184, 129, 11);\n  color: #cccccc;\n`;\nconst COIN_COUNT = 10;\nconst formatPrice = price => parseFloat(Number(price).toFixed(4))\n\nfunction App() {\n\n  const [coinExchangeHeader] = useState(\"Coin Exchange\")\n  const [amount, setAmount] = useState(10000)\n  const [showBalance, setShowBalance] = useState(true)\n  const [coinData, setCoinData] = useState([])\n  \n  const handleRefresh = async (valueChangedTickerId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangedTickerId}`\n    const response = await axios.get(tickerUrl)\n    const newCoinData = coinData.map(function(values) {\n    const newValue = formatPrice(response.data.quotes.USD.price)\n    let newValues = {...values}\n      if(valueChangedTickerId === newValues.key) {\n        newValues.price = newValue\n      }\n      return newValues\n    });\n    \n    setCoinData(newCoinData)\n  }\n\n  const handleBalanceDisplay = () => {\n    setShowBalance(!showBalance)\n  }\n\n  const componentDidMount = async () => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins')\n    const coinId = response.data.slice(0, COIN_COUNT).map(coin => coin.id)\n    let tickerUrl = \"https://api.coinpaprika.com/v1/tickers/\"\n    const promises = coinId.map((id) => axios.get(tickerUrl + id))\n    const coinData = await Promise.all(promises)\n    const coinPriceData = coinData.map(function(response) {\n      let coin = response.data\n      return{\n       key : coin.id,\n       name : coin.name,\n       ticker : coin.symbol,\n       price : formatPrice(coin.quotes.USD.price),\n       balance : 0\n      }\n    });\n    console.log(coinPriceData)\n    setCoinData(coinPriceData)\n   }\n\n  useEffect(() => {\n    console.log(coinData)\n    if(coinData.length === 0) {\n      componentDidMount()\n    }\n  });\n\n  \n  return (\n    <AppHeader>\n          <Header header={coinExchangeHeader}/>\n          <AccountBalance amount={amount} showBalance ={showBalance} handleBalanceDisplay={handleBalanceDisplay}/>\n          <CoinList coinData={coinData} showBalance = {showBalance} handleRefresh={handleRefresh}/>\n    </AppHeader>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}